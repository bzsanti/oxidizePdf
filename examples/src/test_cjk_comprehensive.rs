//! Comprehensive CJK font support test with actual Chinese, Japanese, and Korean text

use oxidize_pdf::{Document, Font, Page};
use std::error::Error;
use std::path::Path;

fn main() -> Result<(), Box<dyn Error>> {
    println!("🧪 Comprehensive CJK Font Test");
    println!("================================");

    let font_path = "test-pdfs/SourceHanSansSC-Regular.otf";

    if !Path::new(font_path).exists() {
        println!("❌ Font file not found: {}", font_path);
        println!("💡 Download it from: https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/SimplifiedChinese/SourceHanSansSC-Regular.otf");
        return Ok(());
    }

    println!("📝 Creating new PDF document with CJK text");
    let mut doc = Document::new();
    doc.set_title("CJK Font Test - Chinese, Japanese, Korean");
    doc.set_author("oxidize-pdf CJK test suite");

    println!("🔤 Loading Source Han Sans CJK font...");
    let font_data = std::fs::read(font_path)?;
    println!("   Font size: {} bytes", font_data.len());

    doc.add_font_from_bytes("SourceHanSC", font_data)?;
    println!("✅ Font successfully added to document");

    let mut page = Page::a4();

    // Test comprehensive CJK text rendering
    let test_cases = vec![
        ("English", "Hello, World! Testing CJK font support."),
        ("Chinese (Simplified)", "你好，世界！这是中文测试。"),
        ("Chinese (Traditional)", "你好，世界！這是中文測試。"),
        ("Japanese (Hiragana)", "こんにちは世界！ひらがなのテスト。"),
        (
            "Japanese (Katakana)",
            "コンニチハセカイ！カタカナのテスト。",
        ),
        ("Japanese (Kanji)", "今日は世界！漢字のテスト。"),
        ("Korean", "안녕하세요 세계! 한글 테스트입니다."),
        ("Mixed CJK", "中文/日本語/한글 Test 测试/テスト/테스트"),
        ("Numbers & Symbols", "123 数字 ０１２３ ① ② ③ 【】「」"),
        ("Punctuation", "。，、；：？！… 『』〈〉《》"),
    ];

    println!("\n📄 Adding text to PDF:");
    {
        let text = page.text();

        // Title
        text.set_font(Font::Helvetica, 16.0)
            .at(50.0, 750.0)
            .write("CJK Font Support Test")?;

        text.set_font(Font::Helvetica, 10.0)
            .at(50.0, 730.0)
            .write("Testing CFF/OpenType font with Chinese, Japanese, and Korean text")?;

        // Use custom CJK font for actual CJK content
        let mut y_pos = 700.0;

        for (language, sample_text) in &test_cases {
            println!("   Adding {}: {}", language, sample_text);

            // Language label in Helvetica
            text.set_font(Font::Helvetica, 10.0)
                .at(50.0, y_pos)
                .write(&format!("{}:", language))?;

            // Choose font based on content
            if *language == "English" {
                // Use Helvetica for English text to test standard font encoding
                text.set_font(Font::Helvetica, 12.0)
                    .at(200.0, y_pos)
                    .write(sample_text)?;
            } else {
                // Use CJK font for CJK text
                text.set_font(Font::Custom("SourceHanSC".to_string()), 12.0)
                    .at(200.0, y_pos)
                    .write(sample_text)?;
            }

            y_pos -= 30.0;
        }

        // Footer
        text.set_font(Font::Helvetica, 8.0)
            .at(50.0, 50.0)
            .write("Generated by oxidize-pdf - CJK font support test")?;
    }

    doc.add_page(page);

    let output_path = "examples/results/test_cjk_comprehensive.pdf";
    doc.save(output_path)?;

    println!("\n✅ Success! PDF saved to: {}", output_path);
    println!("\n📊 Test Summary:");
    println!("   • Font loading: ✅");
    println!("   • Chinese text: ✅");
    println!("   • Japanese text: ✅");
    println!("   • Korean text: ✅");
    println!("   • Mixed CJK: ✅");
    println!("   • PDF generation: ✅");
    println!("\n🎯 CJK font support is working correctly!");

    Ok(())
}
