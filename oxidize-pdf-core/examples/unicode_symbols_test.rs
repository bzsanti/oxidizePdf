//! Test de renderizado de s√≠mbolos Unicode especiales
//! Verifica checkboxes, flechas, s√≠mbolos matem√°ticos, etc.

use oxidize_pdf::{Color, Document, Page, Result};
use std::path::Path;

fn main() -> Result<()> {
    println!("========================================");
    println!("üîß Test de S√≠mbolos Unicode Especiales");
    println!("========================================\n");

    // Test 1: Sin fuente custom (deber√≠a mostrar advertencias)
    test_without_custom_font()?;

    // Test 2: Con fuente custom Type0 (deber√≠a funcionar)
    test_with_custom_font()?;

    println!("\n========================================");
    println!("‚úÖ Tests completados");
    println!("========================================");
    println!("\nRevisa los siguientes archivos:");
    println!("1. unicode_symbols_latin1.pdf - Solo Latin-1 (s√≠mbolos como '?')");
    println!("2. unicode_symbols_type0.pdf - Con fuente Type0 (s√≠mbolos correctos)");

    Ok(())
}

fn test_without_custom_font() -> Result<()> {
    println!("üìù Test 1: Renderizado sin fuente custom (Latin-1 only)");
    println!("-----------------------------------------");

    let mut document = Document::new();
    document.set_title("Test S√≠mbolos Unicode - Latin-1");

    let mut page = Page::new(612.0, 792.0);
    let graphics = page.graphics();

    // Usar Helvetica (solo soporta Latin-1)
    graphics.set_font(oxidize_pdf::Font::Helvetica, 14.0);
    graphics.set_fill_color(Color::black());

    let mut y = 700.0;

    // T√≠tulo
    graphics.draw_text("Test de S√≠mbolos Unicode con Helvetica (Latin-1)", 50.0, y)?;
    y -= 30.0;

    // Estos caracteres est√°n en Latin-1 y deber√≠an verse bien
    graphics.set_fill_color(Color::rgb(0.0, 0.5, 0.0));
    graphics.draw_text("‚úì Caracteres Latin-1 (deber√≠an verse bien):", 50.0, y)?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    let latin1_chars = vec![
        "Acentos: √°√©√≠√≥√∫ √Å√â√ç√ì√ö √±√ë",
        "S√≠mbolos: ¬© ¬Æ ¬∞ ¬ß ¬∂ ¬µ",
        "Monedas: ¬¢ ¬£ ¬§ ¬•",
        "Matem√°ticas: ¬± √ó √∑ ¬¨",
        "Fracciones: ¬º ¬Ω ¬æ",
    ];

    for text in latin1_chars {
        graphics.draw_text(text, 70.0, y)?;
        y -= 18.0;
    }

    y -= 10.0;

    // Estos caracteres NO est√°n en Latin-1 y se mostrar√°n como '?'
    graphics.set_fill_color(Color::rgb(0.8, 0.0, 0.0));
    graphics.draw_text(
        "‚úó Caracteres Unicode extendidos (se ver√°n como '?'):",
        50.0,
        y,
    )?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    let unicode_chars = vec![
        "Checkboxes: ‚òê ‚òë ‚òí ‚úì ‚úó ‚úî ‚úò",
        "Flechas: ‚Üí ‚Üê ‚Üë ‚Üì ‚áí ‚áê ‚áë ‚áì",
        "Matem√°ticas: ‚àë ‚àè ‚à´ ‚àö ‚àû ‚âà ‚â† ‚â§ ‚â•",
        "Formas: ‚ñ† ‚ñ° ‚ñ≤ ‚ñ≥ ‚óè ‚óã ‚òÖ ‚òÜ",
        "S√≠mbolos: ‚ô† ‚ô£ ‚ô• ‚ô¶ ‚ô™ ‚ô´",
    ];

    for text in unicode_chars {
        graphics.draw_text(text, 70.0, y)?;
        y -= 18.0;
    }

    document.add_page(page);
    document.save("unicode_symbols_latin1.pdf")?;

    println!("üìÑ Generado: unicode_symbols_latin1.pdf");

    if let Ok(metadata) = std::fs::metadata("unicode_symbols_latin1.pdf") {
        println!("   Tama√±o: {} bytes", metadata.len());
    }

    Ok(())
}

fn test_with_custom_font() -> Result<()> {
    println!("\nüìù Test 2: Renderizado con fuente Type0 custom");
    println!("-----------------------------------------");

    let mut document = Document::new();
    document.set_title("Test S√≠mbolos Unicode - Type0");

    // Intentar cargar una fuente con soporte Unicode
    let font_paths = vec![
        "/System/Library/Fonts/Supplemental/Arial.ttf", // macOS
        "/System/Library/Fonts/Supplemental/Arial Unicode.ttf", // macOS Unicode
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", // Linux
        "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf", // Linux
        "C:\\Windows\\Fonts\\arial.ttf",                // Windows
    ];

    let mut font_loaded = false;
    let mut font_name = "UnicodeFont";

    for font_path in font_paths {
        if Path::new(font_path).exists() {
            println!("üîç Intentando cargar: {}", font_path);
            match document.add_font(font_name, font_path) {
                Ok(_) => {
                    println!("‚úÖ Fuente cargada exitosamente");
                    font_loaded = true;
                    break;
                }
                Err(e) => {
                    println!("‚ö†Ô∏è  Error cargando fuente: {}", e);
                }
            }
        }
    }

    if !font_loaded {
        println!("‚ùå No se pudo cargar ninguna fuente Unicode");
        println!("   El PDF usar√° Helvetica y los s√≠mbolos aparecer√°n como '?'");
    }

    let mut page = Page::new(612.0, 792.0);
    let graphics = page.graphics();

    // Usar la fuente custom si se carg√≥
    if font_loaded {
        graphics.set_custom_font(font_name, 14.0);
    } else {
        graphics.set_font(oxidize_pdf::Font::Helvetica, 14.0);
    }

    graphics.set_fill_color(Color::black());

    let mut y = 700.0;

    // T√≠tulo
    graphics.draw_text("Test de S√≠mbolos Unicode con Fuente Type0", 50.0, y)?;
    y -= 30.0;

    // Test de checkboxes
    graphics.set_fill_color(Color::rgb(0.0, 0.0, 0.8));
    graphics.draw_text("‚òë Checkboxes y marcas:", 50.0, y)?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    graphics.draw_text("‚òê Checkbox vac√≠o (U+2610)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚òë Checkbox marcado (U+2611)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚òí Checkbox con X (U+2612)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚úì Check mark (U+2713)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚úî Heavy check mark (U+2714)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚úó Ballot X (U+2717)", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚úò Heavy ballot X (U+2718)", 70.0, y)?;
    y -= 25.0;

    // Test de flechas
    graphics.set_fill_color(Color::rgb(0.0, 0.5, 0.0));
    graphics.draw_text("‚Üí Flechas direccionales:", 50.0, y)?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    graphics.draw_text("‚Üê ‚Üí ‚Üë ‚Üì  Flechas b√°sicas", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚áê ‚áí ‚áë ‚áì  Flechas dobles", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚Üñ ‚Üó ‚Üò ‚Üô  Flechas diagonales", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚üµ ‚ü∂ ‚ü∑  Flechas largas", 70.0, y)?;
    y -= 25.0;

    // Test de s√≠mbolos matem√°ticos
    graphics.set_fill_color(Color::rgb(0.5, 0.0, 0.5));
    graphics.draw_text("‚àë S√≠mbolos matem√°ticos:", 50.0, y)?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    graphics.draw_text("‚àë Sumatoria, ‚àè Productoria, ‚à´ Integral", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚àö Ra√≠z cuadrada, ‚àû Infinito", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚âà Aproximadamente, ‚â† No igual", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚â§ Menor o igual, ‚â• Mayor o igual", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚àà Pertenece, ‚àâ No pertenece, ‚äÇ Subconjunto", 70.0, y)?;
    y -= 25.0;

    // Test de formas y s√≠mbolos
    graphics.set_fill_color(Color::rgb(0.8, 0.4, 0.0));
    graphics.draw_text("‚óè Formas y s√≠mbolos:", 50.0, y)?;
    y -= 20.0;

    graphics.set_fill_color(Color::black());
    graphics.draw_text("‚ñ† ‚ñ° ‚ñ™ ‚ñ´  Cuadrados", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚óè ‚óã ‚Ä¢ ‚ó¶  C√≠rculos", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚ñ≤ ‚ñ≥ ‚ñº ‚ñΩ  Tri√°ngulos", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚òÖ ‚òÜ ‚ú¶ ‚úß  Estrellas", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚ô† ‚ô£ ‚ô• ‚ô¶  Naipes", 70.0, y)?;
    y -= 16.0;
    graphics.draw_text("‚ô™ ‚ô´ ‚ô¨ ‚ô≠ ‚ôÆ ‚ôØ  M√∫sica", 70.0, y)?;

    document.add_page(page);
    document.save("unicode_symbols_type0.pdf")?;

    println!("üìÑ Generado: unicode_symbols_type0.pdf");

    if let Ok(metadata) = std::fs::metadata("unicode_symbols_type0.pdf") {
        let size_kb = metadata.len() as f64 / 1024.0;
        println!("   Tama√±o: {:.2} KB", size_kb);

        if font_loaded {
            println!("   Estado: Con fuente Type0 embebida");
        } else {
            println!("   Estado: Sin fuente Unicode (s√≠mbolos como '?')");
        }
    }

    Ok(())
}
