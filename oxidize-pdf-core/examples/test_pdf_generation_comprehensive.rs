//! Comprehensive PDF Generation Testing Suite - v1.1.0 Validation
//!
//! This test suite validates that PDF generation functionality remains robust
//! after all parsing improvements in v1.1.0. Tests cover basic to advanced
//! scenarios to ensure production readiness.

use oxidize_pdf::{Color, Document, Font, Page, Result};
use std::time::Instant;

/// Test 1: Basic PDF Document Creation
/// Verifies core functionality works after parsing changes
fn test_basic_pdf_creation() -> Result<()> {
    println!("🔧 Test 1: Basic PDF Document Creation");
    let start = Instant::now();

    let mut doc = Document::new();

    // Set basic document info
    doc.set_title("Test Basic PDF v1.1.0");
    doc.set_author("oxidize-pdf Test Suite");
    doc.set_subject("Basic functionality validation after v1.1.0 parsing changes");
    doc.set_keywords("test, basic, validation, v1.1.0, parsing, generation");

    // Create a simple page with text
    let mut page = Page::a4();

    // Header text
    page.text()
        .set_font(Font::HelveticaBold, 24.0)
        .at(50.0, 750.0)
        .write("PDF Generation Test - v1.1.0")?;

    // Basic content
    page.text()
        .set_font(Font::Helvetica, 16.0)
        .at(50.0, 700.0)
        .write("✅ Basic PDF creation is working correctly!")?;

    page.text()
        .set_font(Font::Helvetica, 12.0)
        .at(50.0, 660.0)
        .write(
            "This PDF was generated by oxidize-pdf v1.1.0 after extensive parsing improvements.",
        )?
        .at(50.0, 640.0)
        .write("The generation functionality remains fully operational and production-ready.")?;

    // Add timestamp
    let timestamp = std::env::var("USER").unwrap_or("testuser".to_string());
    page.text()
        .set_font(Font::Courier, 10.0)
        .at(50.0, 600.0)
        .write(&format!(
            "Generated by: {} on {:?}",
            timestamp,
            std::time::SystemTime::now()
        ))?;

    // Add visual elements
    page.graphics()
        .set_stroke_color(Color::rgb(0.0, 0.7, 0.2))
        .set_fill_color(Color::rgb(0.9, 0.9, 0.9))
        .set_line_width(2.0)
        .rect(50.0, 540.0, 500.0, 40.0)
        .fill_stroke();

    page.text()
        .set_font(Font::Helvetica, 11.0)
        .at(60.0, 555.0)
        .write("Status: Generation API working perfectly after v1.1.0 parsing improvements")?;

    doc.add_page(page);

    // Save to file
    std::fs::create_dir_all("test_output")?;
    doc.save("test_output/basic_pdf_test.pdf")?;

    let duration = start.elapsed();
    println!("  ✅ Basic PDF created successfully in {:?}", duration);
    println!("  📄 Output: test_output/basic_pdf_test.pdf");

    Ok(())
}

/// Test 2: Multi-Page Document
/// Tests page management and content distribution
fn test_multi_page_document() -> Result<()> {
    println!("\n🔧 Test 2: Multi-Page Document Creation");
    let start = Instant::now();

    let mut doc = Document::new();

    // Document metadata
    doc.set_title("Multi-Page Test Document");
    doc.set_author("oxidize-pdf Comprehensive Tester");
    doc.set_subject("Multi-page generation validation");
    doc.set_keywords("multi-page, pagination, layout, comprehensive");

    // Generate 3 pages with different content types
    for page_num in 1..=3 {
        let mut page = Page::a4();

        // Page header
        page.text()
            .set_font(Font::HelveticaBold, 18.0)
            .at(50.0, 750.0)
            .write(&format!("Page {} of 3", page_num))?;

        page.graphics()
            .set_stroke_color(Color::rgb(0.3, 0.3, 0.3))
            .set_line_width(1.0)
            .move_to(50.0, 740.0)
            .line_to(545.0, 740.0)
            .stroke();

        match page_num {
            1 => {
                // Introduction page with mixed content
                page.text()
                    .set_font(Font::TimesBold, 14.0)
                    .at(50.0, 700.0)
                    .write("Introduction & Overview")?
                    .set_font(Font::TimesRoman, 12.0)
                    .at(50.0, 670.0)
                    .write("This multi-page document demonstrates the robust PDF generation")?
                    .at(50.0, 650.0)
                    .write("capabilities of oxidize-pdf v1.1.0. Each page contains different")?
                    .at(50.0, 630.0)
                    .write("types of content to validate comprehensive functionality.")?;

                // Add colored boxes
                let colors = [
                    Color::rgb(1.0, 0.7, 0.7),
                    Color::rgb(0.7, 1.0, 0.7),
                    Color::rgb(0.7, 0.7, 1.0),
                ];

                for (i, color) in colors.iter().enumerate() {
                    let x = 50.0 + (i as f64 * 160.0);
                    page.graphics()
                        .set_fill_color(*color)
                        .set_stroke_color(Color::rgb(0.5, 0.5, 0.5))
                        .rect(x, 550.0, 140.0, 60.0)
                        .fill_stroke();

                    page.text()
                        .set_font(Font::Helvetica, 10.0)
                        .at(x + 10.0, 575.0)
                        .write(&format!("Feature #{}", i + 1))?;
                }
            }
            2 => {
                // Technical specifications page
                page.text()
                    .set_font(Font::CourierBold, 14.0)
                    .at(50.0, 700.0)
                    .write("Technical Specifications")?;

                let specs = [
                    "• PDF Version: 1.4+ compatible",
                    "• Character encoding: UTF-8 aware",
                    "• Compression: FlateDecode enabled",
                    "• Color spaces: RGB, CMYK support",
                    "• Font support: Standard 14 fonts",
                    "• Graphics: Vector primitives",
                    "• Text: Advanced positioning",
                    "• Metadata: Complete field support",
                ];

                for (i, spec) in specs.iter().enumerate() {
                    page.text()
                        .set_font(Font::Courier, 11.0)
                        .at(70.0, 660.0 - (i as f64 * 25.0))
                        .write(spec)?;
                }

                // Add diagram-like elements
                page.graphics()
                    .set_stroke_color(Color::rgb(0.2, 0.4, 0.8))
                    .set_line_width(2.0)
                    .rect(350.0, 500.0, 150.0, 100.0)
                    .stroke()
                    .circle(425.0, 550.0, 30.0)
                    .stroke();

                page.text()
                    .set_font(Font::Helvetica, 9.0)
                    .at(365.0, 545.0)
                    .write("PDF Structure")?;
            }
            3 => {
                // Summary and validation page
                page.text()
                    .set_font(Font::TimesBoldItalic, 14.0)
                    .at(50.0, 700.0)
                    .write("Validation Summary")?;

                page.text()
                    .set_font(Font::TimesRoman, 12.0)
                    .at(50.0, 670.0)
                    .write("✅ Multi-page generation: PASSED")?
                    .at(50.0, 650.0)
                    .write("✅ Content distribution: PASSED")?
                    .at(50.0, 630.0)
                    .write("✅ Page management: PASSED")?
                    .at(50.0, 610.0)
                    .write("✅ Mixed content types: PASSED")?;

                // Success indicator
                page.graphics()
                    .set_fill_color(Color::rgb(0.8, 1.0, 0.8))
                    .set_stroke_color(Color::rgb(0.0, 0.8, 0.0))
                    .set_line_width(3.0)
                    .rect(50.0, 540.0, 495.0, 50.0)
                    .fill_stroke();

                page.text()
                    .set_font(Font::HelveticaBold, 16.0)
                    .at(60.0, 560.0)
                    .write("🎉 All multi-page generation tests completed successfully!")?;
            }
            _ => unreachable!(),
        }

        // Page footer
        page.text()
            .set_font(Font::Helvetica, 8.0)
            .at(50.0, 30.0)
            .write(&format!(
                "oxidize-pdf v1.1.0 test suite - Generated {:?}",
                std::time::SystemTime::now()
            ))?;

        doc.add_page(page);
    }

    // Save document
    doc.save("test_output/multi_page_test.pdf")?;

    let duration = start.elapsed();
    println!("  ✅ Multi-page PDF created successfully in {:?}", duration);
    println!("  📄 Output: test_output/multi_page_test.pdf (3 pages)");

    Ok(())
}

/// Test 3: Advanced Graphics and Typography
/// Tests complex visual elements and text formatting
fn test_advanced_graphics_typography() -> Result<()> {
    println!("\n🔧 Test 3: Advanced Graphics & Typography");
    let start = Instant::now();

    let mut doc = Document::new();
    doc.set_title("Advanced Graphics & Typography Test");
    doc.set_author("oxidize-pdf Quality Assurance");
    doc.set_subject("Complex visual elements validation");

    let mut page = Page::a4();

    // Title with styling
    page.text()
        .set_font(Font::HelveticaBold, 28.0)
        .at(50.0, 750.0)
        .write("Advanced Features Test")?;

    // Subtitle
    page.text()
        .set_font(Font::TimesItalic, 16.0)
        .at(50.0, 710.0)
        .write("Complex graphics and typography validation")?;

    // Color palette demonstration
    let colors = [
        ("Red", Color::rgb(1.0, 0.0, 0.0)),
        ("Green", Color::rgb(0.0, 1.0, 0.0)),
        ("Blue", Color::rgb(0.0, 0.0, 1.0)),
        ("Purple", Color::rgb(0.8, 0.2, 0.8)),
        ("Orange", Color::rgb(1.0, 0.5, 0.0)),
        ("Teal", Color::rgb(0.0, 0.8, 0.8)),
    ];

    page.text()
        .set_font(Font::HelveticaBold, 14.0)
        .at(50.0, 670.0)
        .write("Color Palette Test:")?;

    for (i, (name, color)) in colors.iter().enumerate() {
        let x = 50.0 + (i as f64 * 80.0);
        let y = 630.0;

        // Color swatch
        page.graphics()
            .set_fill_color(*color)
            .set_stroke_color(Color::rgb(0.0, 0.0, 0.0))
            .rect(x, y, 60.0, 30.0)
            .fill_stroke();

        // Label
        page.text()
            .set_font(Font::Helvetica, 9.0)
            .at(x, y - 15.0)
            .write(name)?;
    }

    // Typography samples
    page.text()
        .set_font(Font::HelveticaBold, 14.0)
        .at(50.0, 580.0)
        .write("Typography Samples:")?;

    let fonts = [
        (Font::Helvetica, "Helvetica: Clean and modern"),
        (Font::HelveticaBold, "Helvetica Bold: Strong emphasis"),
        (Font::TimesRoman, "Times: Classic serif typeface"),
        (Font::TimesBold, "Times Bold: Traditional authority"),
        (Font::Courier, "Courier: Monospace for code"),
        (Font::CourierBold, "Courier Bold: Fixed-width emphasis"),
    ];

    for (i, (font, text)) in fonts.iter().enumerate() {
        page.text()
            .set_font(*font, 11.0)
            .at(70.0, 550.0 - (i as f64 * 20.0))
            .write(text)?;
    }

    // Geometric patterns
    page.text()
        .set_font(Font::HelveticaBold, 14.0)
        .at(50.0, 410.0)
        .write("Geometric Patterns:")?;

    // Draw various shapes in a pattern
    for i in 0..8 {
        let x = 80.0 + (i as f64 * 50.0);
        let y = 350.0;
        let hue = i as f64 / 8.0;
        let color = Color::rgb(
            (hue * 2.0 * std::f64::consts::PI).sin().abs(),
            ((hue + 0.33) * 2.0 * std::f64::consts::PI).sin().abs(),
            ((hue + 0.66) * 2.0 * std::f64::consts::PI).sin().abs(),
        );

        match i % 3 {
            0 => {
                // Circle
                page.graphics()
                    .set_fill_color(color)
                    .circle(x, y, 15.0)
                    .fill();
            }
            1 => {
                // Square
                page.graphics()
                    .set_fill_color(color)
                    .rect(x - 15.0, y - 15.0, 30.0, 30.0)
                    .fill();
            }
            2 => {
                // Triangle (using path)
                page.graphics()
                    .set_stroke_color(color)
                    .set_line_width(3.0)
                    .move_to(x, y + 15.0)
                    .line_to(x - 15.0, y - 15.0)
                    .line_to(x + 15.0, y - 15.0)
                    .close_path()
                    .stroke();
            }
            _ => unreachable!(),
        }
    }

    // Success banner
    page.graphics()
        .set_fill_color(Color::rgb(0.9, 1.0, 0.9))
        .set_stroke_color(Color::rgb(0.0, 0.6, 0.0))
        .set_line_width(2.0)
        .rect(50.0, 280.0, 495.0, 40.0)
        .fill_stroke();

    page.text()
        .set_font(Font::HelveticaBold, 14.0)
        .at(60.0, 295.0)
        .write("✅ Advanced graphics and typography generation working perfectly!")?;

    doc.add_page(page);
    doc.save("test_output/advanced_graphics_test.pdf")?;

    let duration = start.elapsed();
    println!(
        "  ✅ Advanced graphics PDF created successfully in {:?}",
        duration
    );
    println!("  📄 Output: test_output/advanced_graphics_test.pdf");

    Ok(())
}

/// Test 4: Complex Business Document with Charts
/// Creates a business report-style document with mixed content
fn test_complex_business_document() -> Result<()> {
    println!("\n🔧 Test 4: Complex Business Document");
    let start = Instant::now();

    let mut doc = Document::new();
    doc.set_title("Quarterly Business Report Q4 2024");
    doc.set_author("oxidize-pdf Analytics Department");
    doc.set_subject("Comprehensive business reporting with complex layout");
    doc.set_keywords("business, report, quarterly, analytics, charts, data");

    let mut page = Page::a4();

    // Header with corporate styling
    page.graphics()
        .set_fill_color(Color::rgb(0.2, 0.4, 0.8))
        .rect(50.0, 720.0, 495.0, 60.0)
        .fill();

    page.text()
        .set_font(Font::HelveticaBold, 22.0)
        .at(70.0, 745.0)
        .write("📊 QUARTERLY BUSINESS REPORT")?;

    page.text()
        .set_font(Font::Helvetica, 12.0)
        .at(70.0, 725.0)
        .write("Q4 2024 • Executive Summary")?;

    // Executive summary content
    page.text()
        .set_font(Font::TimesBold, 16.0)
        .at(50.0, 680.0)
        .write("Executive Summary")?;

    let summary_text = [
        "• Revenue increased 15.3% year-over-year to $2.4M",
        "• Customer satisfaction improved to 94.2% (up from 89.1%)",
        "• Market expansion into 3 new regions completed successfully",
        "• Digital transformation initiatives ahead of schedule",
        "• Employee retention rate maintained at 96.8%",
        "• Cost optimization resulted in 8.7% operational efficiency gain",
    ];

    for (i, item) in summary_text.iter().enumerate() {
        page.text()
            .set_font(Font::TimesRoman, 11.0)
            .at(70.0, 650.0 - (i as f64 * 20.0))
            .write(item)?;
    }

    // Key metrics chart simulation
    page.text()
        .set_font(Font::TimesBold, 16.0)
        .at(50.0, 510.0)
        .write("Key Performance Indicators")?;

    let metrics = [
        ("Revenue", 85, Color::rgb(0.2, 0.8, 0.2)),
        ("Customer Sat.", 94, Color::rgb(0.2, 0.4, 0.8)),
        ("Efficiency", 78, Color::rgb(0.8, 0.4, 0.2)),
        ("Innovation", 92, Color::rgb(0.8, 0.2, 0.8)),
    ];

    for (i, (label, value, color)) in metrics.iter().enumerate() {
        let x = 70.0 + (i as f64 * 110.0);
        let bar_height = (*value as f64) * 1.2;

        // Bar
        page.graphics()
            .set_fill_color(*color)
            .rect(x, 450.0 - bar_height, 30.0, bar_height)
            .fill();

        // Value label
        page.text()
            .set_font(Font::HelveticaBold, 10.0)
            .at(x + 5.0, 455.0 - bar_height)
            .write(&format!("{}%", value))?;

        // Category label
        page.text()
            .set_font(Font::Helvetica, 9.0)
            .at(x - 5.0, 340.0)
            .write(label)?;
    }

    // Footer with line
    page.graphics()
        .set_stroke_color(Color::rgb(0.7, 0.7, 0.7))
        .move_to(50.0, 320.0)
        .line_to(545.0, 320.0)
        .stroke();

    page.text()
        .set_font(Font::Helvetica, 8.0)
        .at(50.0, 305.0)
        .write("Generated by oxidize-pdf v1.1.0 • Confidential Business Information")?;

    doc.add_page(page);
    doc.save("test_output/business_report_test.pdf")?;

    let duration = start.elapsed();
    println!(
        "  ✅ Business document created successfully in {:?}",
        duration
    );
    println!("  📄 Output: test_output/business_report_test.pdf");

    Ok(())
}

/// Run all comprehensive PDF generation tests
fn run_comprehensive_tests() -> Result<()> {
    println!("🚀 Starting Comprehensive PDF Generation Tests - v1.1.0 Validation\n");

    // Create output directory
    std::fs::create_dir_all("test_output")?;

    let total_start = Instant::now();

    // Run all tests
    test_basic_pdf_creation()?;
    test_multi_page_document()?;
    test_advanced_graphics_typography()?;
    test_complex_business_document()?;

    let total_duration = total_start.elapsed();

    println!("\n🎉 ALL TESTS COMPLETED SUCCESSFULLY!");
    println!("⏱️  Total time: {:?}", total_duration);
    println!("📁 Output directory: test_output/");
    println!("📄 Generated files:");
    println!("   • basic_pdf_test.pdf - Basic functionality validation");
    println!("   • multi_page_test.pdf - Multi-page document test (3 pages)");
    println!("   • advanced_graphics_test.pdf - Graphics and typography test");
    println!("   • business_report_test.pdf - Complex business document");
    println!("\n✅ PDF generation functionality is FULLY OPERATIONAL after v1.1.0 changes!");

    Ok(())
}

fn main() -> Result<()> {
    run_comprehensive_tests()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_comprehensive_pdf_generation() {
        run_comprehensive_tests().expect("All PDF generation tests should pass");
    }
}
