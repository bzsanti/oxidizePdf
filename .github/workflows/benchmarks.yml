name: Benchmarks

on:
  schedule:
    # Run benchmarks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      create_baseline:
        description: 'Create baseline benchmark results'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-bench-
          ${{ runner.os }}-cargo-
          
    - name: Run performance benchmarks
      run: |
        cargo bench --package oxidize-pdf --bench performance_benchmarks

    - name: Run AI chunking benchmarks
      run: |
        cargo bench --package oxidize-pdf --bench ai_chunking

    - name: Run plaintext extraction benchmarks
      run: |
        cargo bench --package oxidize-pdf --bench plaintext_benchmark

    - name: Run OCR benchmarks
      run: |
        cargo bench --package oxidize-pdf --bench ocr_benchmarks
        
    - name: Archive benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: |
          target/criterion/
          
    - name: Save baseline (if requested)
      if: github.event.inputs.create_baseline == 'true'
      run: |
        mkdir -p .github/benchmarks/baseline
        cp -r target/criterion/* .github/benchmarks/baseline/
        echo "Baseline created at $(date)" > .github/benchmarks/baseline/timestamp.txt
        
    - name: Commit baseline
      if: github.event.inputs.create_baseline == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .github/benchmarks/baseline
        git commit -m "chore: update benchmark baseline"
        git push
          
    - name: Performance regression check
      if: github.event_name == 'pull_request'
      run: |
        echo "Performance regression detection would go here"
        echo "Could compare with baseline from main branch"
        echo "For now, just ensure benchmarks complete successfully"
        
  benchmark-comparison:
    name: Compare with baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check for baseline
      id: check_baseline
      run: |
        if [ -d ".github/benchmarks/baseline" ]; then
          echo "baseline_exists=true" >> $GITHUB_OUTPUT
        else
          echo "baseline_exists=false" >> $GITHUB_OUTPUT
          echo "No baseline found. Run workflow with 'create_baseline' to create one."
        fi
        
    - name: Run current benchmarks
      if: steps.check_baseline.outputs.baseline_exists == 'true'
      run: |
        cargo bench --package oxidize-pdf --bench performance_benchmarks
        cargo bench --package oxidize-pdf --bench ai_chunking
        cargo bench --package oxidize-pdf --bench plaintext_benchmark
        
    - name: Install critcmp
      if: steps.check_baseline.outputs.baseline_exists == 'true'
      run: |
        cargo install critcmp
        
    - name: Compare benchmarks
      if: steps.check_baseline.outputs.baseline_exists == 'true'
      run: |
        echo "Comparing current benchmarks with baseline"
        # Copy baseline to compare
        mkdir -p target/criterion_baseline
        cp -r .github/benchmarks/baseline/* target/criterion_baseline/
        
        # Use critcmp to compare
        critcmp target/criterion_baseline target/criterion > comparison.txt || true
        cat comparison.txt
        
        # Check for significant regressions (>10% slower)
        if grep -E "\+[0-9]{2,}\.[0-9]+%" comparison.txt; then
          echo "::warning::Performance regression detected"
        fi
        
    - name: Upload comparison results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-comparison
        path: target/criterion/