name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # First verify this is a valid release trigger
  verify-release-conditions:
    name: Verify Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_conditions.outputs.should_release }}
      version_tag: ${{ steps.check_conditions.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check release conditions
        id: check_conditions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking release conditions..."
          
          # Check if this is a tag push
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION_TAG="${{ github.ref_name }}"
            echo "✅ Tag push detected: $VERSION_TAG"
            
            # Check if tag is on main branch
            if git merge-base --is-ancestor ${{ github.sha }} origin/main; then
              echo "✅ Tag is on main branch"
              
              # Check if this commit came from a merged PR
              PR_NUMBER=$(gh api "repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" --jq '.[0].number' 2>/dev/null || echo "")
              
              if [ -n "$PR_NUMBER" ]; then
                PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state')
                if [ "$PR_STATE" = "MERGED" ]; then
                  echo "✅ Commit came from merged PR #$PR_NUMBER"
                  echo "should_release=true" >> $GITHUB_OUTPUT
                  echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
                else
                  echo "❌ PR #$PR_NUMBER is not merged (state: $PR_STATE)"
                  echo "should_release=false" >> $GITHUB_OUTPUT
                fi
              else
                # If no PR found, allow release if tag is on main (covers direct pushes and tag releases)
                echo "⚠️ No associated PR found, but tag is on main branch - allowing release"
                echo "should_release=true" >> $GITHUB_OUTPUT
                echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Tag is not on main branch"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Not a tag push"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  # Then verify that all CI checks are passing
  check-ci-status:
    name: Verify CI Status
    runs-on: ubuntu-latest
    needs: verify-release-conditions
    if: needs.verify-release-conditions.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check CI status for this commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Checking CI status for commit: $COMMIT_SHA"
          
          # Get all check runs for this commit
          gh api repos/${{ github.repository }}/commits/$COMMIT_SHA/check-runs \
            --jq '.check_runs[] | select(.name != "Verify CI Status") | {name: .name, status: .status, conclusion: .conclusion}' > check_results.json
          
          # Display results
          echo "CI Check Results:"
          cat check_results.json
          
          # Check if any required checks failed (ignore Code Coverage and Generate Coverage Report)
          FAILED_CHECKS=$(cat check_results.json | jq -r 'select(.conclusion == "failure" and .name != "Code Coverage" and .name != "Generate Coverage Report") | .name' | wc -l)
          PENDING_CHECKS=$(cat check_results.json | jq -r 'select((.status == "in_progress" or .status == "queued") and .name != "Code Coverage" and .name != "Generate Coverage Report") | .name' | wc -l)
          
          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "❌ Release blocked: $FAILED_CHECKS CI checks failed"
            exit 1
          fi
          
          if [ "$PENDING_CHECKS" -gt 0 ]; then
            echo "⏳ Release blocked: $PENDING_CHECKS CI checks still pending"
            exit 1
          fi
          
          echo "✅ All CI checks passed. Release can proceed."

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [verify-release-conditions, check-ci-status]
    if: needs.verify-release-conditions.outputs.should_release == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all --release

      - name: Build release binaries
        run: cargo build --all --release

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION_TAG="${{ needs.verify-release-conditions.outputs.version_tag }}"
          VERSION="${VERSION_TAG#v}"  # Remove 'v' prefix
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## oxidize-pdf v${{ steps.get_version.outputs.VERSION }}

            See [CHANGELOG.md](https://github.com/bzsanti/oxidizePdf/blob/main/CHANGELOG.md) for details.

            ### Installation

            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            oxidize-pdf = "${{ steps.get_version.outputs.VERSION }}"
            ```

            Or install the CLI:
            ```bash
            cargo install oxidize-pdf-cli
            ```

      # Detect which packages changed
      - name: Detect changed packages
        id: changes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, assuming all packages changed"
            echo "core_changed=true" >> $GITHUB_OUTPUT
            echo "cli_changed=true" >> $GITHUB_OUTPUT
            echo "api_changed=true" >> $GITHUB_OUTPUT
          else
            CURRENT_TAG="${{ needs.verify-release-conditions.outputs.version_tag }}"
            echo "Comparing changes from $PREVIOUS_TAG to $CURRENT_TAG"
            
            # Check if core package changed
            if git diff --name-only "$PREVIOUS_TAG".."$CURRENT_TAG" | grep -q "^oxidize-pdf-core/"; then
              echo "core_changed=true" >> $GITHUB_OUTPUT
            else
              echo "core_changed=false" >> $GITHUB_OUTPUT
            fi
            
            # Check if CLI package changed
            if git diff --name-only "$PREVIOUS_TAG".."$CURRENT_TAG" | grep -q "^oxidize-pdf-cli/"; then
              echo "cli_changed=true" >> $GITHUB_OUTPUT
            else
              echo "cli_changed=false" >> $GITHUB_OUTPUT
            fi
            
            # Check if API package changed
            if git diff --name-only "$PREVIOUS_TAG".."$CURRENT_TAG" | grep -q "^oxidize-pdf-api/"; then
              echo "api_changed=true" >> $GITHUB_OUTPUT
            else
              echo "api_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Check if packages need new versions before publishing
      - name: Check version changes
        id: version_check
        run: |
          # Get current versions from Cargo.toml files
          # Core uses workspace version, so get it from workspace
          CORE_VERSION=$(grep -A5 "^\[workspace\.package\]" Cargo.toml | grep "^version = " | cut -d'"' -f2)
          CLI_VERSION=$(grep -E "^version = " oxidize-pdf-cli/Cargo.toml | cut -d'"' -f2)
          API_VERSION=$(grep -E "^version = " oxidize-pdf-api/Cargo.toml | cut -d'"' -f2)
          
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "cli_version=$CLI_VERSION" >> $GITHUB_OUTPUT
          echo "api_version=$API_VERSION" >> $GITHUB_OUTPUT
          
          # Check if versions exist on crates.io using API (more reliable than cargo search)
          echo "Checking if versions exist on crates.io..."
          echo "Core version to check: $CORE_VERSION"
          echo "CLI version to check: $CLI_VERSION"
          echo "API version to check: $API_VERSION"

          # Check core package
          CORE_PUBLISHED=$(curl -s "https://crates.io/api/v1/crates/oxidize-pdf" | jq -r '.crate.max_version')
          if [ "$CORE_PUBLISHED" = "$CORE_VERSION" ]; then
            echo "✅ oxidize-pdf v$CORE_VERSION already published"
            echo "core_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 oxidize-pdf v$CORE_VERSION needs publishing (current: $CORE_PUBLISHED)"
            echo "core_needs_publish=true" >> $GITHUB_OUTPUT
          fi

          # Check CLI package
          CLI_PUBLISHED=$(curl -s "https://crates.io/api/v1/crates/oxidize-pdf-cli" | jq -r '.crate.max_version')
          if [ "$CLI_PUBLISHED" = "$CLI_VERSION" ]; then
            echo "✅ oxidize-pdf-cli v$CLI_VERSION already published"
            echo "cli_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 oxidize-pdf-cli v$CLI_VERSION needs publishing (current: $CLI_PUBLISHED)"
            echo "cli_needs_publish=true" >> $GITHUB_OUTPUT
          fi

          # Check API package
          API_PUBLISHED=$(curl -s "https://crates.io/api/v1/crates/oxidize-pdf-api" | jq -r '.crate.max_version')
          if [ "$API_PUBLISHED" = "$API_VERSION" ]; then
            echo "✅ oxidize-pdf-api v$API_VERSION already published"
            echo "api_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 oxidize-pdf-api v$API_VERSION needs publishing (current: $API_PUBLISHED)"
            echo "api_needs_publish=true" >> $GITHUB_OUTPUT
          fi

      # Publish to crates.io (only if version doesn't exist and package changed)
      - name: Publish oxidize-pdf to crates.io
        if: steps.changes.outputs.core_changed == 'true' && steps.version_check.outputs.core_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io (core)
        if: steps.changes.outputs.core_changed == 'true' && steps.version_check.outputs.core_needs_publish == 'true'
        run: sleep 60

      - name: Publish oxidize-pdf-cli to crates.io
        if: steps.changes.outputs.cli_changed == 'true' && steps.version_check.outputs.cli_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf-cli
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io (cli)
        if: steps.changes.outputs.cli_changed == 'true' && steps.version_check.outputs.cli_needs_publish == 'true'
        run: sleep 30

      - name: Publish oxidize-pdf-api to crates.io
        if: steps.changes.outputs.api_changed == 'true' && steps.version_check.outputs.api_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf-api
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Release Summary
        run: |
          echo "🎉 Release v${{ steps.get_version.outputs.VERSION }} completed successfully!"
          echo ""
          echo "✅ Released packages:"
          if [ "${{ steps.changes.outputs.core_changed }}" == "true" ] && [ "${{ steps.version_check.outputs.core_needs_publish }}" == "true" ]; then
            echo "  - oxidize-pdf v${{ steps.get_version.outputs.VERSION }}"
          fi
          if [ "${{ steps.changes.outputs.cli_changed }}" == "true" ] && [ "${{ steps.version_check.outputs.cli_needs_publish }}" == "true" ]; then
            echo "  - oxidize-pdf-cli"
          fi
          if [ "${{ steps.changes.outputs.api_changed }}" == "true" ] && [ "${{ steps.version_check.outputs.api_needs_publish }}" == "true" ]; then
            echo "  - oxidize-pdf-api"
          fi
          echo ""
          echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"
          echo "🚀 Packages available on crates.io"