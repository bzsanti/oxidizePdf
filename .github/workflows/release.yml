name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # First verify that all CI checks are passing
  check-ci-status:
    name: Verify CI Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check CI status for this commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Checking CI status for commit: $COMMIT_SHA"
          
          # Get all check runs for this commit
          gh api repos/${{ github.repository }}/commits/$COMMIT_SHA/check-runs \
            --jq '.check_runs[] | select(.name != "Verify CI Status") | {name: .name, status: .status, conclusion: .conclusion}' > check_results.json
          
          # Display results
          echo "CI Check Results:"
          cat check_results.json
          
          # Check if any required checks failed
          FAILED_CHECKS=$(cat check_results.json | jq -r 'select(.conclusion == "failure") | .name' | wc -l)
          PENDING_CHECKS=$(cat check_results.json | jq -r 'select(.status == "in_progress" or .status == "queued") | .name' | wc -l)
          
          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "❌ Release blocked: $FAILED_CHECKS CI checks failed"
            exit 1
          fi
          
          if [ "$PENDING_CHECKS" -gt 0 ]; then
            echo "⏳ Release blocked: $PENDING_CHECKS CI checks still pending"
            exit 1
          fi
          
          echo "✅ All CI checks passed. Release can proceed."

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: check-ci-status
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all --release

      - name: Build release binaries
        run: cargo build --all --release

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## oxidize-pdf v${{ steps.get_version.outputs.VERSION }}

            See [CHANGELOG.md](https://github.com/bzsanti/oxidizePdf/blob/main/CHANGELOG.md) for details.

            ### Installation

            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            oxidize-pdf = "${{ steps.get_version.outputs.VERSION }}"
            ```

            Or install the CLI:
            ```bash
            cargo install oxidize-pdf-cli
            ```

      # Detect which packages changed
      - name: Detect changed packages
        id: changes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, assuming all packages changed"
            echo "core_changed=true" >> $GITHUB_OUTPUT
            echo "cli_changed=true" >> $GITHUB_OUTPUT
            echo "api_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Comparing changes from $PREVIOUS_TAG to ${{ github.ref_name }}"
            
            # Check if core package changed
            if git diff --name-only "$PREVIOUS_TAG".."${{ github.ref_name }}" | grep -q "^oxidize-pdf-core/"; then
              echo "core_changed=true" >> $GITHUB_OUTPUT
            else
              echo "core_changed=false" >> $GITHUB_OUTPUT
            fi
            
            # Check if CLI package changed
            if git diff --name-only "$PREVIOUS_TAG".."${{ github.ref_name }}" | grep -q "^oxidize-pdf-cli/"; then
              echo "cli_changed=true" >> $GITHUB_OUTPUT
            else
              echo "cli_changed=false" >> $GITHUB_OUTPUT
            fi
            
            # Check if API package changed
            if git diff --name-only "$PREVIOUS_TAG".."${{ github.ref_name }}" | grep -q "^oxidize-pdf-api/"; then
              echo "api_changed=true" >> $GITHUB_OUTPUT
            else
              echo "api_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Check if packages need new versions before publishing
      - name: Check version changes
        id: version_check
        run: |
          # Get current versions from Cargo.toml files
          # Core uses workspace version, so get it from workspace
          CORE_VERSION=$(grep -A5 "^\[workspace\.package\]" Cargo.toml | grep "^version = " | cut -d'"' -f2)
          CLI_VERSION=$(grep -E "^version = " oxidize-pdf-cli/Cargo.toml | cut -d'"' -f2)
          API_VERSION=$(grep -E "^version = " oxidize-pdf-api/Cargo.toml | cut -d'"' -f2)
          
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "cli_version=$CLI_VERSION" >> $GITHUB_OUTPUT
          echo "api_version=$API_VERSION" >> $GITHUB_OUTPUT
          
          # Check if versions exist on crates.io
          if cargo search oxidize-pdf --limit 1 | grep -q "oxidize-pdf.*\"$CORE_VERSION\""; then
            echo "core_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "core_needs_publish=true" >> $GITHUB_OUTPUT
          fi
          
          if cargo search oxidize-pdf-cli --limit 1 | grep -q "oxidize-pdf-cli.*\"$CLI_VERSION\""; then
            echo "cli_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "cli_needs_publish=true" >> $GITHUB_OUTPUT
          fi
          
          if cargo search oxidize-pdf-api --limit 1 | grep -q "oxidize-pdf-api.*\"$API_VERSION\""; then
            echo "api_needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "api_needs_publish=true" >> $GITHUB_OUTPUT
          fi

      # Publish to crates.io (only if version doesn't exist and package changed)
      - name: Publish oxidize-pdf to crates.io
        if: steps.changes.outputs.core_changed == 'true' && steps.version_check.outputs.core_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io (core)
        if: steps.changes.outputs.core_changed == 'true' && steps.version_check.outputs.core_needs_publish == 'true'
        run: sleep 60

      - name: Publish oxidize-pdf-cli to crates.io
        if: steps.changes.outputs.cli_changed == 'true' && steps.version_check.outputs.cli_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf-cli
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io (cli)
        if: steps.changes.outputs.cli_changed == 'true' && steps.version_check.outputs.cli_needs_publish == 'true'
        run: sleep 30

      - name: Publish oxidize-pdf-api to crates.io
        if: steps.changes.outputs.api_changed == 'true' && steps.version_check.outputs.api_needs_publish == 'true'
        run: cargo publish -p oxidize-pdf-api
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Create PR to merge to main branch after successful release
      - name: Prepare merge to main
        run: |
          echo "Preparing merge to main branch..."
          
          # Check if main has different files that could conflict
          git fetch origin main
          
          # Create a clean branch from current state
          git checkout -b release-merge-v${{ steps.get_version.outputs.VERSION }}
          
          # Ensure we have all changes committed
          git add -A
          
          # Only commit if there are changes
          if ! git diff --cached --exit-code; then
            git commit -m "chore: finalize release v${{ steps.get_version.outputs.VERSION }}" || echo "No changes to commit"
          fi
          
          git push origin release-merge-v${{ steps.get_version.outputs.VERSION }}
      
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --head release-merge-v${{ steps.get_version.outputs.VERSION }} \
            --title "🚀 Release v${{ steps.get_version.outputs.VERSION }} - Automated merge" \
            --body "$(cat <<'EOF'
          ## Automated Release Merge
          
          This PR merges the release changes after successful release of v${{ steps.get_version.outputs.VERSION }}.
          
          ### Release Details:
          - ✅ CI checks passed before release
          - 📦 Packages published to crates.io
          - 🏷️ GitHub Release created
          - ⚡ All tests passed
          
          ### What's included:
          - Version bumps and changelog updates
          - Code quality improvements (warning fixes)
          - Documentation updates
          
          ### Next Steps:
          1. Review the changes
          2. Approve and merge this PR
          3. The release cycle will be complete
          
          ---
          *This is an automated PR created after successful release to crates.io*
          EOF
          )" \
            --label release,automated